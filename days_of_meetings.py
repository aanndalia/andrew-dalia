'''
Meeting Schedule II
Given an array of meeting time interval objects consisting of start and end times [[start_1,end_1],[start_2,end_2],...] (start_i < end_i), find the minimum number of days required to schedule all meetings without any conflicts.

Example 1:

Input: intervals = [(0,40),(5,10),(15,20)]

Output: 2
Explanation:
day1: (0,40)
day2: (5,10),(15,20)

Example 2:

Input: intervals = [(4,9)]

Output: 1
Note:

(0,8),(8,10) is not considered a conflict at 8
Constraints:

0 <= intervals.length <= 100
0 <= intervals[i].start < intervals[i].end <= 1000
Accepted: 2864  |  Submitted: 11841  |  Acceptance Rate: 24%
'''


def minMeetingRooms(intervals) -> int:
    n = len(intervals)
    if n < 2:
        return n

    num_meets = [0 for _ in range(1000001)]
    max_num_meets = 0
    for interval in intervals:
        for i in range(interval[0], interval[1]):
            num_meets[i] += 1
            max_num_meets = max(max_num_meets, num_meets[i])

    return max_num_meets


intervals=[(220087,220112),(275304,275391),(177774,177809),(496046,496059),(268796,268867),(25879,25939),(98653,98732),(233721,233729),(487406,487487),(525636,525716),(384100,384137),(247245,247302),(135856,135952),(113,156),(213508,213599),(395353,395420),(285452,285455),(450905,450941),(362080,362091),(479809,479874),(138547,138620),(54275,54303),(100020,100105),(262,301),(260169,260218),(303057,303060),(9628,9642),(119968,120028),(407315,407400),(342574,342655),(132251,132349),(222013,222059),(414512,414523),(180842,180939),(11452,11485),(444437,444507),(254860,254870),(507864,507951),(284941,284991),(211462,211560),(5568,5654),(191219,191305),(42350,42426),(167892,167984),(63004,63015),(304737,304774),(541296,541350),(81661,81665),(484314,484412),(398435,398520),(196575,196640),(510577,510602),(111145,111192),(315361,315383),(84296,84354),(350316,350325),(211618,211665),(61472,61516),(153530,153617),(551733,551797),(534864,534956),(279668,279728),(51854,51947),(249449,249522),(502689,502776),(469208,469226),(425721,425815),(60610,60632),(28242,28260),(436520,436575),(469514,469545),(419895,419920),(428554,428651),(460472,460537),(507694,507766),(88702,88747),(70817,70857),(328019,328107),(531695,531746),(31548,31613),(271434,271508),(270559,270632),(399850,399901),(160913,160964),(378504,378517),(203336,203380),(123812,123900),(130917,130925),(107749,107849),(502169,502185),(167393,167471),(525895,525992),(245516,245557),(113415,113452),(475546,475641),(318469,318478),(6072,6147),(205306,205324),(435673,435764),(472967,473035),(156651,156691),(401147,401232),(278033,278113),(154595,154688),(358506,358591),(312784,312801),(301678,301776),(231367,231389),(494790,494879),(152361,152397),(440236,440336),(224420,224440),(168441,168456),(398597,398633),(383772,383823),(76727,76809),(450276,450355),(182293,182393),(80680,80755),(197518,197570),(457952,457994),(369533,369618),(308337,308416),(238176,238211),(84001,84060),(170868,170966)]
res = minMeetingRooms(intervals)
print(res)